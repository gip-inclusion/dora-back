# Generated by Django 3.2.12 on 2022-03-08 10:47

from django.db import migrations, models


class StructureSource(models.TextChoices):
    DORA_STAFF = "DORA", "Équipe DORA"
    ITOU = "ITOU", "Import ITOU"
    STRUCT_STAFF = "PORTEUR", "Porteur"
    PE_API = "PE", "API Référentiel Agence PE"
    BATCH_INVITE = "BI", "Invitations en masse"
    COLLAB = "COL", "Suggestion collaborative"


class StructureTypology(models.TextChoices):
    # https://docs.google.com/spreadsheets/d/1scfJUEcNWP9KMrHFf_7OCCSs4RyDZmH3dK70HJA-rIk/
    AC = "AC", "Associations de chômeurs"
    ACI = "ACI", "Structures porteuses d’ateliers et chantiers d’insertion (ACI)"
    ACIPHC = (
        "ACIPHC",
        "SIAE — Atelier chantier d’insertion premières heures en chantier",
    )
    AFPA = (
        "AFPA",
        "Agence nationale pour la formation professionnelle des adultes (AFPA)",
    )
    AI = "AI", "Associations intermédiaires (AI)"
    ASE = "ASE", "Aide sociale à l’enfance (ASE)"
    ASSO = "ASSO", "Associations"
    CADA = "CADA", "Centres d’accueil de demandeurs d’asile (CADA)"
    CAF = "CAF", "Caisses d’allocation familiale (CAF)"
    CAP_EMPLOI = "CAP_EMPLOI", "Cap Emploi"
    CAVA = "CAVA", "Centres d’adaptation à la vie active (CAVA)"
    CC = "CC", "Communautés de Commune"
    CCAS = "CCAS", "Centres communaux d’action sociale (CCAS)"
    CD = "CD", "Conseils Départementaux (CD)"
    CHRS = "CHRS", "Centres d’hébergement et de réinsertion sociale (CHRS)"
    CHU = "CHU", "Centres d’hébergement d’urgence (CHU)"
    CIAS = "CIAS", "Centres intercommunaux d’action sociale (CIAS)"
    CIDFF = (
        "CIDFF",
        "Centres d’information sur les droits des femmes et des familles (CIDFF)",
    )
    CPH = "CPH", "Centres provisoires d’hébergement (CPH)"
    CS = "CS", "Centre social"
    CT = "CT", "Collectivités territoriales"
    DEETS = (
        "DEETS",
        "Directions de l’Economie, de l’Emploi, du Travail et des Solidarités (DEETS)",
    )
    DIPLP = (
        "DIPLP",
        "Délégation interministérielles à la prévention et à la lutte contre la pauvreté",
    )
    EA = "EA", "Entreprise adaptée (EA)"
    EATT = "EATT", "Entreprise Adaptée (EATT)"
    EI = "EI", "Entreprises d’insertion (EI)"
    EITI = "EITI", "Entreprises d’insertion par le travail indépendant (EITI)"
    EPCI = "EPCI", "Intercommunalité (EPCI)"
    ETTI = "ETTI", "Entreprises de travail temporaire d’insertion (ETTI)"
    FAIS = "FAIS", "Fédérations d’acteurs de l’insertion et de la solidarité"
    GEIQ = (
        "GEIQ",
        "Groupements d’employeurs pour l’insertion et la qualification (GEIQ)",
    )
    ML = "ML", "Mission Locale"
    MQ = "MQ", "Maison de quartier"
    MSA = "MSA", "Mutualité Sociale Agricole"
    MSAP = "MSAP", "Maison de Service au Public (MSAP)"
    MUNI = "MUNI", "Municipalités"
    OACAS = (
        "OACAS",
        "Structures agréées Organisme d’accueil communautaire et d’activité solidaire (OACAS)",
    )
    OF = "OF", "Organisme de formations"
    OTHER = "OTHER", "Autre"
    PE = "PE", "Pôle emploi"
    PIJ_BIJ = "PIJ_BIJ", "Points et bureaux information jeunesse (PIJ/BIJ)"
    PIMMS = "PIMMS", "Point Information Médiation Multi Services (PIMMS)"
    PJJ = "PJJ", "Protection judiciaire de la jeunesse (PJJ)"
    PLIE = "PLIE", "Plans locaux pour l’insertion et l’emploi (PLIE)"
    PR = "PR", "Préfecture, Sous-Préfecture"
    RE = "RE", "Région"
    SCCD = "SCCD", "Services sociaux du Conseil départemental"
    SCP = "SCP", "Services et clubs de prévention"
    SPIP = "SPIP", "Services pénitentiaires d’insertion et de probation (SPIP)"
    TL = "TL", "Tiers lieu & coworking"
    UDAF = "UDAF", "Union Départementale d’Aide aux Familles (UDAF)"


def migrate_sources(apps, schema_editor):
    Structure = apps.get_model("structures", "Structure")
    StructureSource2 = apps.get_model("structures", "StructureSource2")

    new_sources = {}
    for value, label in StructureSource.choices:
        new_sources[value] = StructureSource2.objects.create(value=value, label=label)

    for structure in Structure.objects.all():
        structure.source2 = new_sources.get(structure.source)
        structure.save(update_fields=("source2",))


def reverse_migrate_sources(apps, schema_editor):
    Structure = apps.get_model("structures", "Structure")
    StructureSource2 = apps.get_model("structures", "StructureSource2")
    Structure.objects.update(source2=None)
    StructureSource2.objects.all().delete()


def migrate_typologies(apps, schema_editor):
    Structure = apps.get_model("structures", "Structure")
    StructureTypology2 = apps.get_model("structures", "StructureTypology2")

    new_typologies = {}
    for value, label in StructureTypology.choices:
        new_typologies[value] = StructureTypology2.objects.create(
            value=value, label=label
        )

    for structure in Structure.objects.all():
        structure.typology2 = new_typologies.get(structure.typology)
        structure.save(update_fields=("typology2",))


def reverse_migrate_typologies(apps, schema_editor):
    Structure = apps.get_model("structures", "Structure")
    StructureTypology2 = apps.get_model("structures", "StructureTypology2")
    Structure.objects.update(typology2=None)
    StructureTypology2.objects.all().delete()


class Migration(migrations.Migration):
    dependencies = [
        ("structures", "0034_auto_20220308_1146"),
    ]

    operations = [
        migrations.RunPython(migrate_sources, reverse_code=reverse_migrate_sources),
        migrations.RunPython(
            migrate_typologies, reverse_code=reverse_migrate_typologies
        ),
    ]
